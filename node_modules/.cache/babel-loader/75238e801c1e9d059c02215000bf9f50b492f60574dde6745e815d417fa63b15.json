{"ast":null,"code":"// import axios from \"axios\";\n\n// const api = axios.create({\n//   baseURL: \"http://127.0.0.1:8000\", // Django backend URL\n//   withCredentials: true,\n//   headers: {\n//     \"Content-Type\": \"application/json\",\n//   },\n// });\n\n// // Automatically attach JWT token if available\n// api.interceptors.request.use((config) => {\n//   const token = localStorage.getItem(\"access_token\");\n//   if (token) {\n//     config.headers.Authorization = `Bearer ${token}`;\n//   }\n//   return config;\n// });\n\n// // Handle token expiration: Refresh and retry failed requests\n// api.interceptors.response.use(\n//   (response) => response, // Return response if success\n//   async (error) => {\n//     const originalRequest = error.config;\n//     if (error.response?.status === 401 && !originalRequest._retry) {\n//       originalRequest._retry = true;\n//       try {\n//         const refreshToken = localStorage.getItem(\"refresh_token\");\n//         if (refreshToken) {\n//           const res = await axios.post(\"http://127.0.0.1:8000/api/token/refresh/\", {\n//             refresh: refreshToken,\n//           });\n//           localStorage.setItem(\"access_token\", res.data.access);\n//           api.defaults.headers.common[\"Authorization\"] = `Bearer ${res.data.access}`;\n//           return api(originalRequest); // Retry the failed request\n//         }\n//       } catch (refreshError) {\n//         console.error(\"Session expired. Please log in again.\");\n//         localStorage.removeItem(\"access_token\");\n//         localStorage.removeItem(\"refresh_token\");\n//         window.location.href = \"/\"; // Redirect to login page\n//       }\n//     }\n//     return Promise.reject(error);\n//   }\n// );\n\n// export const getCsrfToken = () => {\n//   const cookies = document.cookie.split(\"; \");\n//   const csrfCookie = cookies.find((row) => row.startsWith(\"csrftoken=\"));\n//   return csrfCookie ? csrfCookie.split(\"=\")[1] : null;\n// };\n\n// export default api;\n\nimport axios from \"axios\";\nconst api = axios.create({\n  baseURL: \"http://127.0.0.1:8000\",\n  // Django backend URL\n  withCredentials: true,\n  // Ensure cookies are sent\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Fetch CSRF token and set it in headers\nexport const getCsrfToken = async () => {\n  try {\n    const response = await api.get(\"/api/csrf/\");\n    const csrfToken = response.data.csrfToken;\n    api.defaults.headers.common[\"X-CSRFToken\"] = csrfToken;\n    console.log(\"CSRF Token set:\", csrfToken);\n  } catch (error) {\n    console.error(\"Error fetching CSRF token:\", error);\n  }\n};\n\n// Call this function before making API requests\ngetCsrfToken();","map":{"version":3,"names":["axios","api","create","baseURL","withCredentials","headers","getCsrfToken","response","get","csrfToken","data","defaults","common","console","log","error"],"sources":["/Users/raj/Web application/book_management/src/services/api.js"],"sourcesContent":["// import axios from \"axios\";\n\n// const api = axios.create({\n//   baseURL: \"http://127.0.0.1:8000\", // Django backend URL\n//   withCredentials: true,\n//   headers: {\n//     \"Content-Type\": \"application/json\",\n//   },\n// });\n\n// // Automatically attach JWT token if available\n// api.interceptors.request.use((config) => {\n//   const token = localStorage.getItem(\"access_token\");\n//   if (token) {\n//     config.headers.Authorization = `Bearer ${token}`;\n//   }\n//   return config;\n// });\n\n// // Handle token expiration: Refresh and retry failed requests\n// api.interceptors.response.use(\n//   (response) => response, // Return response if success\n//   async (error) => {\n//     const originalRequest = error.config;\n//     if (error.response?.status === 401 && !originalRequest._retry) {\n//       originalRequest._retry = true;\n//       try {\n//         const refreshToken = localStorage.getItem(\"refresh_token\");\n//         if (refreshToken) {\n//           const res = await axios.post(\"http://127.0.0.1:8000/api/token/refresh/\", {\n//             refresh: refreshToken,\n//           });\n//           localStorage.setItem(\"access_token\", res.data.access);\n//           api.defaults.headers.common[\"Authorization\"] = `Bearer ${res.data.access}`;\n//           return api(originalRequest); // Retry the failed request\n//         }\n//       } catch (refreshError) {\n//         console.error(\"Session expired. Please log in again.\");\n//         localStorage.removeItem(\"access_token\");\n//         localStorage.removeItem(\"refresh_token\");\n//         window.location.href = \"/\"; // Redirect to login page\n//       }\n//     }\n//     return Promise.reject(error);\n//   }\n// );\n\n// export const getCsrfToken = () => {\n//   const cookies = document.cookie.split(\"; \");\n//   const csrfCookie = cookies.find((row) => row.startsWith(\"csrftoken=\"));\n//   return csrfCookie ? csrfCookie.split(\"=\")[1] : null;\n// };\n\n\n// export default api;\n\n\n\n\nimport axios from \"axios\";\n\nconst api = axios.create({\n  baseURL: \"http://127.0.0.1:8000\", // Django backend URL\n  withCredentials: true, // Ensure cookies are sent\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n// Fetch CSRF token and set it in headers\nexport const getCsrfToken = async () => {\n  try {\n    const response = await api.get(\"/api/csrf/\");\n    const csrfToken = response.data.csrfToken;\n    api.defaults.headers.common[\"X-CSRFToken\"] = csrfToken;\n    console.log(\"CSRF Token set:\", csrfToken);\n  } catch (error) {\n    console.error(\"Error fetching CSRF token:\", error);\n  }\n};\n\n// Call this function before making API requests\ngetCsrfToken();\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;;AAKA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,uBAAuB;EAAE;EAClCC,eAAe,EAAE,IAAI;EAAE;EACvBC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAG,CAAC,YAAY,CAAC;IAC5C,MAAMC,SAAS,GAAGF,QAAQ,CAACG,IAAI,CAACD,SAAS;IACzCR,GAAG,CAACU,QAAQ,CAACN,OAAO,CAACO,MAAM,CAAC,aAAa,CAAC,GAAGH,SAAS;IACtDI,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEL,SAAS,CAAC;EAC3C,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;EACpD;AACF,CAAC;;AAED;AACAT,YAAY,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}