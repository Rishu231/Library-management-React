{"ast":null,"code":"// import axios from \"axios\";\n\n// const api = axios.create({\n//   baseURL: \"http://127.0.0.1:8000\", // Django backend URL\n//   withCredentials: true,\n//   headers: {\n//     \"Content-Type\": \"application/json\",\n//   },\n// });\n\n// // Automatically attach JWT token if available\n// api.interceptors.request.use((config) => {\n//   const token = localStorage.getItem(\"access_token\");\n//   if (token) {\n//     config.headers.Authorization = `Bearer ${token}`;\n//   }\n//   return config;\n// });\n\n// // Handle token expiration: Refresh and retry failed requests\n// api.interceptors.response.use(\n//   (response) => response, // Return response if success\n//   async (error) => {\n//     const originalRequest = error.config;\n//     if (error.response?.status === 401 && !originalRequest._retry) {\n//       originalRequest._retry = true;\n//       try {\n//         const refreshToken = localStorage.getItem(\"refresh_token\");\n//         if (refreshToken) {\n//           const res = await axios.post(\"http://127.0.0.1:8000/api/token/refresh/\", {\n//             refresh: refreshToken,\n//           });\n//           localStorage.setItem(\"access_token\", res.data.access);\n//           api.defaults.headers.common[\"Authorization\"] = `Bearer ${res.data.access}`;\n//           return api(originalRequest); // Retry the failed request\n//         }\n//       } catch (refreshError) {\n//         console.error(\"Session expired. Please log in again.\");\n//         localStorage.removeItem(\"access_token\");\n//         localStorage.removeItem(\"refresh_token\");\n//         window.location.href = \"/\"; // Redirect to login page\n//       }\n//     }\n//     return Promise.reject(error);\n//   }\n// );\n\n// export const getCsrfToken = () => {\n//   const cookies = document.cookie.split(\"; \");\n//   const csrfCookie = cookies.find((row) => row.startsWith(\"csrftoken=\"));\n//   return csrfCookie ? csrfCookie.split(\"=\")[1] : null;\n// };\n\n// export default api;\n\nimport axios from \"axios\";\nconst api = axios.create({\n  baseURL: \"http://127.0.0.1:8000\",\n  // Your Django backend URL\n  withCredentials: true,\n  // ✅ Ensure cookies (including CSRF) are sent\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Function to get CSRF token from cookies\nexport const getCsrfToken = () => {\n  const cookies = document.cookie.split(\"; \");\n  const csrfCookie = cookies.find(row => row.startsWith(\"csrftoken=\"));\n  return csrfCookie ? csrfCookie.split(\"=\")[1] : null;\n};\n\n// Automatically attach CSRF token to requests\napi.interceptors.request.use(config => {\n  const csrfToken = getCsrfToken();\n  if (csrfToken) {\n    config.headers[\"X-CSRFToken\"] = csrfToken;\n  }\n  return config;\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","withCredentials","headers","getCsrfToken","cookies","document","cookie","split","csrfCookie","find","row","startsWith","interceptors","request","use","config","csrfToken"],"sources":["/Users/raj/Web application/book_management/src/services/api.js"],"sourcesContent":["// import axios from \"axios\";\n\n// const api = axios.create({\n//   baseURL: \"http://127.0.0.1:8000\", // Django backend URL\n//   withCredentials: true,\n//   headers: {\n//     \"Content-Type\": \"application/json\",\n//   },\n// });\n\n// // Automatically attach JWT token if available\n// api.interceptors.request.use((config) => {\n//   const token = localStorage.getItem(\"access_token\");\n//   if (token) {\n//     config.headers.Authorization = `Bearer ${token}`;\n//   }\n//   return config;\n// });\n\n// // Handle token expiration: Refresh and retry failed requests\n// api.interceptors.response.use(\n//   (response) => response, // Return response if success\n//   async (error) => {\n//     const originalRequest = error.config;\n//     if (error.response?.status === 401 && !originalRequest._retry) {\n//       originalRequest._retry = true;\n//       try {\n//         const refreshToken = localStorage.getItem(\"refresh_token\");\n//         if (refreshToken) {\n//           const res = await axios.post(\"http://127.0.0.1:8000/api/token/refresh/\", {\n//             refresh: refreshToken,\n//           });\n//           localStorage.setItem(\"access_token\", res.data.access);\n//           api.defaults.headers.common[\"Authorization\"] = `Bearer ${res.data.access}`;\n//           return api(originalRequest); // Retry the failed request\n//         }\n//       } catch (refreshError) {\n//         console.error(\"Session expired. Please log in again.\");\n//         localStorage.removeItem(\"access_token\");\n//         localStorage.removeItem(\"refresh_token\");\n//         window.location.href = \"/\"; // Redirect to login page\n//       }\n//     }\n//     return Promise.reject(error);\n//   }\n// );\n\n// export const getCsrfToken = () => {\n//   const cookies = document.cookie.split(\"; \");\n//   const csrfCookie = cookies.find((row) => row.startsWith(\"csrftoken=\"));\n//   return csrfCookie ? csrfCookie.split(\"=\")[1] : null;\n// };\n\n\n// export default api;\n\n\n\n\nimport axios from \"axios\";\n\nconst api = axios.create({\n  baseURL: \"http://127.0.0.1:8000\", // Your Django backend URL\n  withCredentials: true,  // ✅ Ensure cookies (including CSRF) are sent\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n// Function to get CSRF token from cookies\nexport const getCsrfToken = () => {\n  const cookies = document.cookie.split(\"; \");\n  const csrfCookie = cookies.find((row) => row.startsWith(\"csrftoken=\"));\n  return csrfCookie ? csrfCookie.split(\"=\")[1] : null;\n};\n\n// Automatically attach CSRF token to requests\napi.interceptors.request.use((config) => {\n  const csrfToken = getCsrfToken();\n  if (csrfToken) {\n    config.headers[\"X-CSRFToken\"] = csrfToken;\n  }\n  return config;\n});\n\nexport default api;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;;AAKA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,uBAAuB;EAAE;EAClCC,eAAe,EAAE,IAAI;EAAG;EACxBC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAChC,MAAMC,OAAO,GAAGC,QAAQ,CAACC,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC;EAC3C,MAAMC,UAAU,GAAGJ,OAAO,CAACK,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,UAAU,CAAC,YAAY,CAAC,CAAC;EACtE,OAAOH,UAAU,GAAGA,UAAU,CAACD,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI;AACrD,CAAC;;AAED;AACAT,GAAG,CAACc,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,SAAS,GAAGb,YAAY,CAAC,CAAC;EAChC,IAAIa,SAAS,EAAE;IACbD,MAAM,CAACb,OAAO,CAAC,aAAa,CAAC,GAAGc,SAAS;EAC3C;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEF,eAAejB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}